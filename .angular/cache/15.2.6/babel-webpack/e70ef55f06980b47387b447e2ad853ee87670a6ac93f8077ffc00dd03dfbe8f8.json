{"ast":null,"code":"export class List {\n  constructor() {\n    this.cards = [];\n  }\n  addCard(card) {\n    if (this.isCardEmpty()) {\n      this.cards = [];\n    }\n    this.cards.push(card);\n  }\n  removeCard(id) {\n    if (this.isCardEmpty()) {\n      return null;\n    }\n    const cardIndex = this.cards.findIndex(x => x.id === id);\n    if (cardIndex > -1) {\n      const cardInterfaces = this.cards.splice(cardIndex, 1);\n      return cardInterfaces[0];\n    }\n    return null;\n  }\n  isCardEmpty() {\n    return this.cards === undefined || this.cards === null;\n  }\n}","map":{"version":3,"mappings":"AAWA,OAAM,MAAOA,IAAI;EAQfC,YAAA;IANA,KAAAC,KAAK,GAAoB,EAAE;EAO3B;EAIAC,OAAOA,CAACC,IAAmB;IACzB,IAAI,IAAI,CAACC,WAAW,EAAE,EAAE;MACtB,IAAI,CAACH,KAAK,GAAG,EAAE;;IAEjB,IAAI,CAACA,KAAK,CAACI,IAAI,CAACF,IAAI,CAAC;EACvB;EAEAG,UAAUA,CAACC,EAAU;IACnB,IAAI,IAAI,CAACH,WAAW,EAAE,EAAE;MACtB,OAAO,IAAI;;IAEb,MAAMI,SAAS,GAAG,IAAI,CAACP,KAAK,CAACQ,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IACxD,IAAIC,SAAS,GAAG,CAAC,CAAC,EAAE;MAClB,MAAMG,cAAc,GAAG,IAAI,CAACV,KAAK,CAACW,MAAM,CAACJ,SAAS,EAAE,CAAC,CAAC;MACtD,OAAOG,cAAc,CAAC,CAAC,CAAC;;IAG1B,OAAO,IAAI;EAEb;EAEQP,WAAWA,CAAA;IACjB,OAAO,IAAI,CAACH,KAAK,KAAKY,SAAS,IAAI,IAAI,CAACZ,KAAK,KAAK,IAAI;EACxD","names":["List","constructor","cards","addCard","card","isCardEmpty","push","removeCard","id","cardIndex","findIndex","x","cardInterfaces","splice","undefined"],"sourceRoot":"","sources":["/Users/mac/Desktop/kanban-angular/src/app/model/list/list.model.ts"],"sourcesContent":["import { Card, CardInterface } from '../card/card.model';\n\nexport interface ListInterface {\n  id: string;\n  name: string;\n  position: number;\n  cards: CardInterface[];\n\n}\n\n\nexport class List implements ListInterface {\n\n  cards: CardInterface[] = [];\n  id: string;\n  name: string;\n  position: number;\n\n\n  constructor() {\n  }\n\n\n\n  addCard(card: CardInterface) {\n    if (this.isCardEmpty()) {\n      this.cards = [];\n    }\n    this.cards.push(card);\n  }\n\n  removeCard(id: string): CardInterface {\n    if (this.isCardEmpty()) {\n      return null;\n    }\n    const cardIndex = this.cards.findIndex(x => x.id === id);\n    if (cardIndex > -1) {\n      const cardInterfaces = this.cards.splice(cardIndex, 1);\n      return cardInterfaces[0];\n    }\n\n    return null;\n\n  }\n\n  private isCardEmpty() {\n    return this.cards === undefined || this.cards === null;\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}